#!/usr/bin/env ruby

require 'pathname'
EXECUTABLE_PATH = Pathname.new(__FILE__).realpath
PROJECT_ROOT = File.expand_path('../..', EXECUTABLE_PATH)

require 'rubygems'
require 'bundler'

Dir.chdir(PROJECT_ROOT) { Bundler.setup }

lib = File.join(PROJECT_ROOT, 'lib')
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'autoparts'
require 'commander/import'

program :version, Autoparts::VERSION
program :description, 'Autoparts: A Package Manager for Nitrous.IO'

command :init do |c|
  c.syntax = 'eval "$(parts init -)"'
  c.summary = 'Setup environment variables for Autoparts.'
  c.description = 'Setup environment variables for Autoparts.'
  c.example 'Init', 'eval "$(parts init -)"'
  c.action Autoparts::Commands::Init
end

command :list do |c|
  c.syntax = 'parts list'
  c.summary = 'List installed packages.'
  c.description = 'List installed packages.'
  c.example 'List', 'parts list'
  c.action Autoparts::Commands::List
end

command :install do |c|
  c.syntax = 'parts install PACKAGE_NAME'
  c.summary = 'Install a package.'
  c.description = 'Install a package.'
  c.example 'Install MySQL', 'parts install mysql'
  c.option '--source', 'Install from source'
  c.action Autoparts::Commands::Install
end

if ENV['AUTOPARTS_DEV'] == '1'
  command :archive do |c|
    c.syntax = 'parts archive PACKAGE_NAME'
    c.summary = 'Archives a installed package as a downloadable pre-compiled binary.'
    c.description = 'Archives a installed package as a downloadable pre-compiled binary.'
    c.example 'Archive MySQL', 'parts archive mysql'
    c.action Autoparts::Commands::Archive
  end
end

#command :uninstall do |c|
  #c.syntax = 'parts uninstall [options]'
  #c.summary = ''
  #c.description = ''
  #c.example 'description', 'command example'
  #c.option '--some-switch', 'Some switch that does something'
  #c.action do |args, options|
    ## Do something or c.when_called Autoparts::Commands::Uninstall
  #end
#end

#command :update do |c|
  #c.syntax = 'parts update [options]'
  #c.summary = ''
  #c.description = ''
  #c.example 'description', 'command example'
  #c.option '--some-switch', 'Some switch that does something'
  #c.action do |args, options|
    ## Do something or c.when_called Autoparts::Commands::Update
  #end
#end

#command :upgrade do |c|
  #c.syntax = 'parts upgrade [options]'
  #c.summary = ''
  #c.description = ''
  #c.example 'description', 'command example'
  #c.option '--some-switch', 'Some switch that does something'
  #c.action do |args, options|
    ## Do something or c.when_called Autoparts::Commands::Upgrade
  #end
#end

#command :search do |c|
  #c.syntax = 'parts search [options]'
  #c.summary = ''
  #c.description = ''
  #c.example 'description', 'command example'
  #c.option '--some-switch', 'Some switch that does something'
  #c.action do |args, options|
    ## Do something or c.when_called Autoparts::Commands::Search
  #end
#end

#command :info do |c|
  #c.syntax = 'parts info [options]'
  #c.summary = ''
  #c.description = ''
  #c.example 'description', 'command example'
  #c.option '--some-switch', 'Some switch that does something'
  #c.action do |args, options|
    ## Do something or c.when_called Autoparts::Commands::Info
  #end
#end
